[gd_scene load_steps=5 format=2]

[ext_resource path="res://score_event_system.tscn" type="PackedScene" id=1]
[ext_resource path="res://Graphics/TypeO.ttf" type="DynamicFontData" id=2]

[sub_resource type="DynamicFont" id=1]
size = 100
font_data = ExtResource( 2 )

[sub_resource type="GDScript" id=2]
script/source = "extends Label

var stacking_score_notification = null
var score_notification_active = false

func _ready():
	randomize()

func score_event():
	var score_value = 7 + randi()%6
	text = str(int(text) + score_value)
	
	if score_notification_active:
		stacking_score_notification.set_score(score_value + stacking_score_notification.get_score())
	else:
		var score_notification = load(\"res://ScoreNotifications/sn3.tscn\").instance()
		get_node(\"..\").add_child(score_notification)
		score_notification.position = Vector2((rect_size.x/2) - 150 + randf()*300, rect_size.y/2)
		score_notification.set_score(score_value)
		score_notification.connect(\"disappear\", self, \"kill_score_notification\", [score_notification])
		score_notification_active = true
		stacking_score_notification = score_notification
		
func kill_score_notification(which):
	which.queue_free()
	stacking_score_notification = null
	score_notification_active = false"

[node name="counter3" type="Node2D"]

[node name="base" parent="." instance=ExtResource( 1 )]

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="counter" type="Label" parent="CanvasLayer"]
modulate = Color( 0, 0, 0, 1 )
margin_right = 800.0
margin_bottom = 147.0
custom_fonts/font = SubResource( 1 )
text = "0"
align = 1
valign = 1
script = SubResource( 2 )
